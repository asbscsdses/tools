bencoding
字符串:		len:string					
	例子，4:spam表示spam

整数:		前缀i，后缀e,中间整数		
	例子，i3e表示3，i-3e表示-3，i0e表示0，其他情况下，如果整数有前缀0，则非法;i-0e也是非法

列表:		前缀l，后缀e，中间是元素	
	例子，l4:spam4:eggse表示['spam','eggs']

字典：		前缀d，后缀e,中间是key-value的列表
	例子，d3:cow3:moo4:spam4:eggse表示{'cow':'moo','spam':'eggs'}
	例子，d4:spaml1:a1:bee表示{'spam':['a','b']}
	key必须是字符串，按原始字符串的位置编码，而不要按文字顺序排序
	

	

metainfo文件
metainfo文件(也就是.torrent文件)是bencoding编码的字典，包含以下key

announce
	tracker的url
	
info
	这映射到了一个字典，key会在下面进行解释
	
.torrent文件里面所有字符串包含的文本必须是utf-8编码。	



info字典
name是一个utf-8编码的字符串，表示存储文件时推荐的文件名。
piece_length表示文件被分割后每块数据的字节数。为了便于传输，文件被分割成固定块数，每块数据大小一样，除了最后一块可能会不一样。piece_length基本上都会是2的指数。最可能的情况是2的18次方，也就是256K。(bittorrent3.2版本之前的软件使用2的20次方，也就是1M作为默认值)。
pieces指向一个字符串，其长度是20的倍数。每20个字符串是每个文件块对应自己所在索引的哈希值，采用SHA1算法。

还存在一个length key或files key, 但它们不会都存在,或都不存在. 如果存在length, 那么本次下载是个单文件， 否则的话，它代表是一组文件，以文件夹的形式。

如果是单个文件，length代表了该文件的字节长度

对于其他key的用途，多文件的情况被当作只有一个文件，通过把文件列表中的文件按出现的顺序一个个连接起来。这就是files key。这是一个字典的列表，包含如下key
length 文件的字节长度
path 一个utf-8编码的字符串列表，对应每个子目录的名，最后一个是文件名，如果是空列表，表明出错了

单文件的情况下，name key代表文件的名字，而在多文件情况下，它是目录的名字







trackers
tracker GET请求有以下Key

info_hash
将metainfo文件中的info值的bencoding编码形式进行sha1哈希后得到的20字节。这个值几乎肯定会被escaped。
TODO

peer_id
下载者使用此值作为其id,它是长度为20的字符串。每个下载者在开启一个新的下载时会生成一个随机的Id。这个值几乎也肯定会被escaped。

ip
可选参数，给出peer所在的ip。通常用来当作原始做种者如果它跟tracker在同一台机器上。

port
指出peer所监听的端口。通常的操作是这样的，一个下载者试图在6881端口上监听，如果被占用了，就试6882，然后6882，依次如下，6889后不再重试。

uploaded
目前为止上传总数，采用10进制ascii编码

downloaded
目前为止下载总数，采用10进制ascii编码

left
该peer还需要下载的字节数，采用10进制ascii编码。注意这不能通过已下载数和文件长度来计算出来，因为它可能是一个resume,也有可能已下载的数据校验失败，需要重下。

event
这是一个可选的key,映射到以下值：started、completed、stopped、empty(等同于该key不存在)。如果该key不存在，这是一个定期通知的其中的一个。一个使用started的通知会被发送，如果一个下载第一次开始时。如果下载结束时，带completed的通知会被发送。当下载开始时，发现文件其实下载完了，completed通知不会发送。当下载者中断下载时，带stopped的通知会被发送。

tracker的响应是bencoding编码的字典。如果tracker响应包含failure reason,这表示是一个可供人理解的字符串，解释了为什么查询失败了，这种情况下，没有别的Key存在。否则的话，有两个key是必需的：interval，表示下载者在正常的请求之间所需要等待的秒数；peers，这是一个字典的列表，对应于相应的peers。包含了以下key:peer_id、ip、port，分别代表peer id,ip地址或dns名称以字符串的形式，和相应的端口号。请注意，当有事件发生时或者需要更多peer时，下载者可能会重新发送请求，并没有按照他们应该等待的时间。

更通常的情况是tracker返回一个关于peer列表的打包的表现形式，参考BEP23

如果想对metainfo文件或tracker请求进行扩展，请与Bram Cohen协调来确保所有的扩展都相互兼容。

使用udp tracker协议进行通讯也是很通用的。







peer协议
bittorrent的peer协议通过tcp或utp来传输。

peer连接是对称的。两个方向传输的消息看起来是一样的。数据可流向任何一个方向。

peer协议通过索引来指向文件的每一块，索引在metainfo文件中有定义，从0开始。当一个peer下载完一块数据且校验成功，它向自己的peers通知我有这一块数据。

连接包含两个状态位，分别在连接的两端:choked、interested。阻塞是一个通知表示没有数据会被发送直到疏通发生了。关于阻塞的原因和技巧会在本文档的后面解释。

当连接的一端的状态是interested，另一端的状态不是阻塞时，数据传输会发生。interested的状态必须一直保持是最新的状态-当一个下载者不再向一个非阻塞的peer要东西时，它必须表示自己没有interest，不管是否阻塞了。实现这个机制是要花点技巧的，但它让以下情况变得可能：当变成非阻塞时，下载者就知道哪些peer立刻开始了下载。

